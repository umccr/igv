// The MIT License (MIT)
//
// Copyright (c) 2007-2018 Broad Institute
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

apply plugin: 'java'
apply plugin: 'application'

import org.apache.tools.ant.filters.ReplaceTokens

mainClassName = 'org.broad.igv.ui.Main'
ext.moduleName = 'org.igv'

buildDir = 'build'

wrapper { }

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/main/java11']
        }
        resources {
            srcDirs = ['src/main/resources', 'src/main/resources-jlfgr-1_0']
            exclude "**/*LICENSE*", "**/META-INF"
        }
    }
}

configurations {
    jarsForClasspath
    implementation {
        exclude group: 'com.google.code.findbugs', module: 'annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'com.google.errorprone'
        exclude group: 'com.google.guava', module: 'listenablefuture'
        exclude group: 'com.google.guava', module: 'failureaccess'
        exclude group: 'com.github.lucarosellini.rJava', module: 'JRI'
        exclude group: 'commons-beanutils', module: 'commons-beanutils'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'io.netty', module: 'netty-codec-http2'
        exclude group: 'com.martiansoftware', module: 'jsap'
        exclude group: 'colt', module: 'colt'
        exclude group: 'com.thoughtworks.xstream', module: 'xstream'
        exclude group: 'org.reflections', module: 'reflections'
        exclude group: 'org.codehaus.mojo', module: 'animal-sniffer-annotations'
        exclude group: 'org.checkerframework', module: 'checker-qual'
        exclude group: 'com.ibm.icu', module: 'icu4j'
        exclude group: 'log4j', module: 'log4j'

        exclude group: 'xmlpull', module: 'xmlpull'
        exclude group: 'xpp3', module: 'xpp3_min'
        exclude group: 'org.tukaani', module: 'xz'

        exclude group: 'org.apache.ant', module: 'ant'
        exclude group: 'org.apache.ant', module: 'ant-launcher'
        exclude group: 'org.apache.commons', module: 'commons-math'

        // Batik deps
        exclude group: 'org.apache.xmlgraphics', module: 'batik-script'
        exclude group: 'xml-apis', module: 'xml-apis'
        exclude group: 'xml-apis', module: 'xml-apis-ext'
        exclude group: 'xalan', module: 'serializer'
        exclude group: 'xalan', module: 'xalan'

        // Amazon deps
        exclude group: 'software.amazon', module: 'flow'
        exclude group: 'software.amazon.awssdk', module: 'annotations'
        //exclude group: 'software.amazon.awssdk', module: 'aws-xml-protocol'
        //exclude group: 'software.amazon.awssdk', module: 'http-client-spi'
        //exclude group: 'software.amazon.awssdk', module: 'apache-client'
        //exclude group: 'software.amazon.awssdk', module: 'utils'
        //exclude group: 'software.amazon.awssdk', module: 'annotations'
        //exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        //exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        //exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
        //exclude group: 'org.reactivestreams', module: 'reactive-streams'
        //exclude group: 'com.typesafe.netty', module: 'netty-reactive-streams'
        //exclude group: 'com.typesafe.netty', module: 'netty-reactive-streams-http'

        // Exclude very old htsjdk from Goby while we wait for https://github.com/igvteam/igv/issues/646
        exclude group: 'com.github.samtools', module: 'htsjdk'
    }
}

dependencies {
    implementation (
        fileTree(dir: 'lib', include: '*.jar'), // first search on disk (old behavior), then maven repos
        [group: 'org.apache.ant', name: 'ant', version: '1.10.5'],
        [group: 'com.google.code.gson', name: 'gson', version: '2.8.5'],
        [group: 'com.google.protobuf', name: 'protobuf-java', version: '3.7.0-rc1'],
        [group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'],
        [group: 'commons-io', name: 'commons-io', version: '2.6'],
        //[group: 'com.github.samtools', name: 'htsjdk', version: '2.19.0'],
        // holding upstream htsjdk back from Maven for this @igvteam jar hack: https://github.com/igvteam/igv/issues/646
        [group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'],
        [group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'],
        [group: 'org.swinglabs', name: 'swing-layout', version: '1.0.3'],
        [group: 'org.bidib.com.jidesoft', name: 'jide-common', version: '3.7.3'],
        [group: 'com.google.guava', name: 'guava', version: '27.0.1-jre'],
        [group: 'org.campagnelab.goby', name: 'goby-io', version: '3.3.1'],
        [group: 'org.campagnelab.icb', name: 'icb-utils', version: '2.0.2'],
        [group: 'org.campagnelab.ext', name: 'jsap', version: '3.0.0'],
        [group: 'org.apache.xmlgraphics', name: 'batik-dom', version: '1.11'],
        [group: 'org.apache.xmlgraphics', name: 'batik-svggen', version: '1.11'],
        [group: 'org.apache.xmlgraphics', name: 'batik-codec', version: '1.11'],
        [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.26'],
        [group: 'org.netbeans.external', name: 'AbsoluteLayout', version: 'RELEASE110'],

        // Amazon deps
        //[group: 'software.amazon.awssdk', name: 'http-client-spi', version: '2.7.2'],
        [group: 'software.amazon.awssdk', name: 'cognitoidentity', version: '2.5.0'],
        [group: 'software.amazon.awssdk', name: 's3', version: '2.5.0']
    )

    testImplementation(
        fileTree(dir: 'test/lib', include: '*.jar')
    )
}



processResources {
    // Set the current timestamp for release builds; pass in a blank property to enable (i.e. -Ptimestamp="" at CLI)
    if (timestamp.equals("")) { timestamp = new Date().format("MM/dd/yyyy hh:mm aa") }

    filesMatching('.properties') {
        filter (ReplaceTokens,
                tokens: [ VERSION: version, BUILD: buildNumber, DEFAULT_MASTER_RESOURCE_URL: dataServerUrl,
                          TIMESTAMP: timestamp, DEVELOPMENT: development ])
    }
}

jar {
    archiveName = 'igv.jar'
    manifest {
        attributes(
            "Permissions": "all-permissions",
            "Application-Name": "IGV",
            "Built-By": System.getProperty('user.name'),
            "Main-Class": mainClassName,
        )
    }
}

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

tasks.withType(Test) {
    systemProperties = System.getProperties()
    systemProperties['java.awt.headless'] = 'true'
    systemProperties['make.fail'] = 'false'
    systemProperties['include.longrunning'] = 'false'
    systemProperties['ignore.ioexceptions'] = 'false'
    maxHeapSize = '2000m'
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    
    
    
}

compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
            '--module-path',  classpath.asPath, 
            '--add-modules', 'junit',
            '--add-modules', 'fest.swing',
            '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath, 
        ]
        classpath = files()
    }
}

test {
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
            '-Dcom.sun.xml.bind.v2.bytecode.ClassTailor.noOptimize',
            '--module-path',  classpath.asPath,
            '--add-modules', 'junit',
            '--add-modules', 'fest.swing',
            '--add-modules', 'ALL-MODULE-PATH',
            '--add-reads', "$moduleName=junit",
            '--add-reads', "$moduleName=fest.swing",
            '@scripts/java11/test_suite.args',
            '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir, sourceSets.main.output.resourcesDir).asPath,
        ]
        classpath = files()
    }
}

// XXX: Perhaps not the standard Gradle way to ship this?
task copyToLib(type: Copy, dependsOn: jar) {
    from configurations.default
    into "${buildDir}/deplibs"
}

task createDist(type: Copy, dependsOn: copyToLib)  {
    from ("web/IGV_64.png")
    from ('scripts/java11') {
        include '*.bat'
        include '*.sh'

//task createDist(type: Copy, dependsOn: fullJar)  {
//    from ("scripts") {
//        include 'igv.bat'
//        include 'igv_32.bat'
        include 'igv.command'
        include 'igv.args'
        include 'readme.txt'
        include 'igvtools*'
    }
    with copySpec {
        from ("${buildDir}/libs")
        from ("lib") { include '*.jar' }
        into "lib"
    }
    // XXX: Perhaps not the best way to ship deplibs either
    with copySpec {
        from ("${buildDir}/deplibs")
        from ("lib") { include '*.jar' }
        into "lib"
    }

    with copySpec { from ("genomes/sizes") { } into "lib/genomes" }

    into "${buildDir}/IGV-dist"
}

task createLinuxDistZip(type: Zip, dependsOn: createDist) {
    baseName = "UMCCR_AWS_IGV_Linux"
    archiveName = createLinuxDistZip.baseName + ".zip"
    destinationDir = file("${buildDir}/distZip")
    if (!jdkBundleLinux.equals("")) {
        with copySpec { from jdkBundleLinux into "jdk-11" }
    }
    from ("${buildDir}/IGV-dist") {
        exclude "*.bat"
        exclude "*.command"
    }
    into createLinuxDistZip.baseName

    doLast {
        project.exec { commandLine('chmod', '775', createLinuxDistZip.archivePath) }
    }
}

task createMacAppDist(type: Copy, dependsOn: createDist) {
    if (!jdkBundleMac.equals("")) {
        with copySpec { from jdkBundleMac into "UMCCR_AWS_IGV_MacOS.app/Contents/jdk-11" }
    }
    with copySpec {
        from ("scripts/mac.app") {
            exclude "Contents/Info.plist.template"
            exclude "Contents/MacOS/JavaAppLauncher"
        }
        into "UMCCR_AWS_IGV_MacOS.app"
    }
    with copySpec {
        from ("scripts/java11/Info.plist.template")
        filter (ReplaceTokens, tokens: [ VERSION: version ])
        rename "Info.plist.template", "Info.plist"
        into "UMCCR_AWS_IGV_MacOS.app/Contents"
    }
    with copySpec {
        from ("scripts/java11/IGV_mac.app.command")
        rename "IGV_mac.app.command", "IGV"
        into "UMCCR_AWS_IGV_MacOS.app/Contents/MacOS"
    }
    with copySpec {
        from ("web/IGV_64.png")
        into "UMCCR_AWS_IGV_MacOS.app/Contents/Resources"
    }
    with copySpec {
        from ("${buildDir}/IGV-dist/") include 'igv.args'
        into "UMCCR_AWS_IGV_MacOS.app/Contents/Java/"
    }
    with copySpec {
        from ("${buildDir}/IGV-dist/lib") include '*.jar'
        into "UMCCR_AWS_IGV_MacOS.app/Contents/Java/lib"
    }
    into "${buildDir}/IGV-MacApp-dist"

    doLast {
        project.exec { commandLine('chmod', '775', "${buildDir}/IGV-MacApp-dist/UMCCR_AWS_IGV_MacOS.app" ) }
    }
}

task createMacAppDistZip(type: Zip, dependsOn: createMacAppDist) {
    archiveName = "UMCCR_AWS_IGV_MacOS.app.zip"
    destinationDir = file("${buildDir}/distZip")
    from "${buildDir}/IGV-MacApp-dist"

    doLast {
        project.exec { commandLine('chmod', '775', createMacAppDistZip.archivePath ) }
    }
}

task createWinDist(type: Copy, dependsOn: createDist) {
    if (!jdkBundleWindows.equals("")) {
        with copySpec { from jdkBundleWindows into "IGV_${version}/jdk-11" }
    }
    with copySpec {
        from("${buildDir}/IGV-dist") {
            exclude "*.sh"
            exclude "*.command"
            exclude "igvtools"
            exclude "igvtools_gui"
            exclude "igvtools_gui_hidpi"
        }
        from ("resources") { include "IGV_64.ico" }
        into "IGV_${version}"
    }
    with copySpec {
        // Create a build-specific NSIS installer script.
        from ("scripts/nsis/installer.nsi")
        filter (ReplaceTokens, tokens: [ VERSION: version ])
    }
    from ("scripts/nsis") { include "license_win.txt" }
    into "${buildDir}/IGV-WinExe-dist"
}

task createWinExeDist(type: Exec, dependsOn: createWinDist) {
    commandLine(makensisCommand, "-O${buildDir}/tmp/nsis-build.log",
                "${buildDir}/IGV-WinExe-dist/installer.nsi")
    doLast {
        if (makensisCommand.equals("")) {
            throw new GradleException("Required property not set: makensisCommand");
        }
    }
}

task signWinExeDist(type: Exec, dependsOn: createWinExeDist) {
    standardInput = new ByteArrayInputStream( keyPassword.getBytes() );
    commandLine(signcodeCommand, "-spc", spcFile, "-v", pvkFile, "-a", "sha1",
                "-\$", "commercial", "-n", "IGV ${version}", "-i", "http://www.igv.org/",
                "-t", tsaurl, "-tr", "10", "${buildDir}/IGV-WinExe-dist/IGV_${version}-installer.exe")
    doLast {
        if (signcodeCommand.equals("")) {
            throw new GradleException("Required property not set: signcodeCommand");
        }
    }
}

build.dependsOn createLinuxDistZip,createMacAppDistZip

if (!makensisCommand.equals("") && !signcodeCommand.equals("")) {
    build.dependsOn signWinExeDist
}
